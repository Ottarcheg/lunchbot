import asyncio
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import json
import pytz
import os

TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
CHAT_ID = None  # –ë—É–¥–µ—Ç –∑–∞–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏

DATA_FILE = "lunch_data.json"
TIMEZONE = pytz.timezone("Europe/Nicosia")

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO,
)

def load_data():
    if not os.path.exists(DATA_FILE):
        logging.warning("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

async def ask_lunch(application: Application):
    global CHAT_ID
    if not CHAT_ID:
        logging.info("CHAT_ID –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return

    now = datetime.now(TIMEZONE)
    date_str = now.strftime("%Y-%m-%d")

    data = load_data()
    if date_str not in data:
        data[date_str] = None
        save_data(data)

    reply_markup = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await application.bot.send_message(chat_id=CHAT_ID, text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=reply_markup)
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–µ–¥.")

async def send_summary(application: Application):
    global CHAT_ID
    if not CHAT_ID:
        logging.info("CHAT_ID –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á—ë—Ç–∞.")
        return

    data = load_data()
    count = sum(1 for v in data.values() if v == "–î–∞")

    if count == 0:
        message = "–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—â—É—â–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã (–Ω–µ—Ç)"
    elif count == 1:
        message = "–ù—É –Ω–∏—á–µ–≥–æ, —Ç—ã —Å—Ç–∞—Ä–∞–ª—Å—è!"
    elif count == 2:
        message = "–ù–µ–ø–ª–æ—Ö–æ!"
    elif count == 3:
        message = "–ö—Ä–∞—Å–∞–≤—á–∏–∫, —Ü–µ–ª—ã—Ö —Ç—Ä–∏ –æ–±–µ–¥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
    elif count == 4:
        message = "–í–∞—É! –¢—ã —Å—É–ø–µ—Ä!"
    elif count == 5:
        message = "–í—Å—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª? –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!"
    elif count == 6:
        message = "–¢—ã –ø—Ä–æ—Å—Ç–æ –ª—É—á—à–∏–π, –ø–æ—á—Ç–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª!"
    else:
        message = "–ê–º–±–∏–ª–∏–≤–±–ª! –í–∏–Ω —Å—Ç—Ä–∏–∫!"

    await application.bot.send_message(chat_id=CHAT_ID, text=f"üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:

{message}")
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é.")
    save_data({})

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = update.effective_chat.id
    text = update.message.text
    now = datetime.now(TIMEZONE)
    date_str = now.strftime("%Y-%m-%d")

    data = load_data()
    data[date_str] = text
    save_data(data)

    await context.bot.send_message(chat_id=CHAT_ID, text="–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ç–≤–µ—Ç: {date_str} -> {text}")

async def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_response))

    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: asyncio.create_task(ask_lunch(application)), "cron", hour=11, minute=55)
    scheduler.add_job(lambda: asyncio.create_task(send_summary(application)), "cron", day_of_week="sun", hour=19, minute=0)
    scheduler.start()

    logging.info("üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LunchBot...")
    await application.initialize()
    logging.info("‚úÖ LunchBot –≥–æ—Ç–æ–≤. –°—Ç–∞—Ä—Ç polling...")
    await application.start()
    await application.updater.start_polling()
    await application.updater.idle()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
