import asyncio
import json
import logging
from datetime import datetime
from pytz import timezone
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
CHAT_ID = 344657888  # —Ç–≤–æ–π Telegram ID
DATA_FILE = "lunch_data.json"

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

app = Flask(__name__)
scheduler = BackgroundScheduler(timezone="Europe/Nicosia")
keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

async def ask_lunch(application: Application):
    today = datetime.now(timezone("Europe/Nicosia")).strftime("%Y-%m-%d")
    data = load_data()
    if today not in data:
        data[today] = None
        save_data(data)
        await application.bot.send_message(chat_id=CHAT_ID, text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –æ–±–µ–¥–∞.")
    else:
        logging.info("–°–µ–≥–æ–¥–Ω—è —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏.")

async def send_summary(application: Application):
    data = load_data()
    week = [d for d in data.items() if d[1] == "–î–∞"]
    count = len(week)
    messages = {
        0: "–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—â—É—â–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã (–Ω–µ—Ç)",
        1: "–ù—É –Ω–∏—á–µ–≥–æ, —Ç—ã —Å—Ç–∞—Ä–∞–ª—Å—è!",
        2: "–ù–µ–ø–ª–æ—Ö–æ!",
        3: "–ö—Ä–∞—Å–∞–≤—á–∏–∫, —Ü–µ–ª—ã—Ö —Ç—Ä–∏ –æ–±–µ–¥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!",
        4: "–í–∞—É! –¢—ã —Å—É–ø–µ—Ä!",
        5: "–í—Å—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª? –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!",
        6: "–¢—ã –ø—Ä–æ—Å—Ç–æ –ª—É—á—à–∏–π, –ø–æ—á—Ç–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª!",
        7: "–ê–º–±–∏–ª–∏–≤–±–ª! –í–∏–Ω —Å—Ç—Ä–∏–∫!",
    }
    summary_text = messages.get(count, f"–û—Ç–≤–µ—Ç–æ–≤ '–î–∞': {count}")
    await application.bot.send_message(
        chat_id=CHAT_ID,
        text=f"""üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:

{summary_text}"""
    )
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é.")

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(timezone("Europe/Nicosia")).strftime("%Y-%m-%d")
    data = load_data()
    if today in data and data[today] is None:
        data[today] = update.message.text
        save_data(data)
        await update.message.reply_text("–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω.")
        logging.info(f"–û—Ç–≤–µ—Ç –Ω–∞ {today}: {update.message.text}")

@app.route("/")
def home():
    return "LunchBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

async def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & filters.USER(chat_id=CHAT_ID), handle_response))

    scheduler.add_job(lambda: asyncio.create_task(ask_lunch(application)), "cron", hour=12, minute=10)
    scheduler.add_job(lambda: asyncio.create_task(send_summary(application)), "cron", day_of_week="sun", hour=19, minute=0)
    scheduler.start()

    logging.info("‚úÖ LunchBot –≥–æ—Ç–æ–≤. –ó–∞–ø—É—Å–∫ polling...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
