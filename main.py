import json
import asyncio
import logging
from datetime import datetime, timedelta
from flask import Flask
from threading import Thread
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, MessageHandler, filters
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import os

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO,
)

TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
USER_ID = 344657888
DATA_FILE = "lunch_data.json"
TIMEZONE = pytz.timezone("Asia/Nicosia")

app = Flask(__name__)

@app.route("/")
def home():
    return "LunchBot is alive!", 200

def run_flask():
    logging.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return data
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        return {}

def save_data(data):
    try:
        with open(DATA_FILE, "w") as f:
            json.dump(data, f)
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_today_key():
    return datetime.now(TIMEZONE).strftime("%Y-%m-%d")

async def handle_response(update: Update, context: CallbackContext):
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.message.text}")
    data = load_data()
    today = get_today_key()
    if today not in data:
        data[today] = []
    if update.message.text == "–î–∞":
        if USER_ID not in data[today]:
            data[today].append(USER_ID)
    elif update.message.text == "–ù–µ—Ç":
        if USER_ID in data[today]:
            data[today].remove(USER_ID)
    save_data(data)
    await update.message.reply_text("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

async def send_lunch_reminder(application):
    logging.info("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ª–∞–Ω—á–µ...")
    kb = [["–î–∞", "–ù–µ—Ç"]]
    await application.bot.send_message(chat_id=USER_ID, text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))
    logging.info("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

async def run_ping(application):
    logging.info("üì° –ü–∏–Ω–≥ –æ—Ç Railway")
    await application.bot.send_message(chat_id=USER_ID, text="üì° –ü–∏–Ω–≥ –æ—Ç Railway")

async def main():
    logging.info("üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LunchBot...")
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & filters.User(USER_ID), handle_response))

    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: application.create_task(send_lunch_reminder(application)), "cron", hour=11, minute=50)
    scheduler.add_job(lambda: application.create_task(run_ping(application)), "interval", minutes=4)
    scheduler.start()
    logging.info("‚úÖ LunchBot –≥–æ—Ç–æ–≤. –°—Ç–∞—Ä—Ç polling...")
    keep_alive()
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
