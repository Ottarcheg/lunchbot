import asyncio
import logging
import json
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from flask import Flask
import nest_asyncio

nest_asyncio.apply()

BOT_TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
CHAT_ID = 344657888
DATA_FILE = "lunch_data.json"

app = Flask(__name__)
scheduler = BackgroundScheduler()

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

async def ask_lunch(application: Application):
    logging.info("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ –æ–±–µ–¥...")
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await application.bot.send_message(chat_id=CHAT_ID, text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.message.text.lower()
    today = datetime.now().strftime("%Y-%m-%d")
    data = load_data()
    data[today] = 1 if user_response == "–¥–∞" else 0
    save_data(data)
    logging.info(f"üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {user_response}")

async def send_weekly_summary(application: Application):
    data = load_data()
    count = sum(data.get(day, 0) for day in data)
    messages = {
        0: "–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—â—É—â–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã (–Ω–µ—Ç)",
        1: "–ù—É –Ω–∏—á–µ–≥–æ, —Ç—ã —Å—Ç–∞—Ä–∞–ª—Å—è!",
        2: "–ù–µ–ø–ª–æ—Ö–æ!",
        3: "–ö—Ä–∞—Å–∞–≤—á–∏–∫, —Ü–µ–ª—ã—Ö —Ç—Ä–∏ –æ–±–µ–¥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!",
        4: "–í–∞—É! –¢—ã —Å—É–ø–µ—Ä!",
        5: "–í—Å—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª? –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!",
        6: "–¢—ã –ø—Ä–æ—Å—Ç–æ –ª—É—á—à–∏–π, –ø–æ—á—Ç–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª!",
        7: "–ê–º–±–∏–ª–∏–≤–±–ª! –í–∏–Ω —Å—Ç—Ä–∏–∫!",
    }
    message = f"""üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:
{messages.get(count, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')}"""
    await application.bot.send_message(chat_id=CHAT_ID, text=message)
    save_data({})

@app.route("/")
def home():
    return "LunchBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

async def main():
    logging.info("üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LunchBot...")
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & filters.Chat(chat_id=CHAT_ID), handle_message))

    scheduler.add_job(lambda: asyncio.create_task(ask_lunch(application)), CronTrigger(hour=12, minute=20, timezone="Europe/Nicosia"))
    scheduler.add_job(lambda: asyncio.create_task(send_weekly_summary(application)), CronTrigger(day_of_week="sun", hour=19, minute=0, timezone="Europe/Nicosia"))
    scheduler.start()

    logging.info("‚úÖ LunchBot –≥–æ—Ç–æ–≤. –°—Ç–∞—Ä—Ç polling...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
