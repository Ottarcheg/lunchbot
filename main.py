
import asyncio
import json
import logging
from datetime import datetime
from pytz import timezone
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
import nest_asyncio
from flask import Flask
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
CHAT_ID = 570026464
DATA_FILE = "lunch_data.json"
TIMEZONE = timezone("Europe/Nicosia")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO,
)

# Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/")
def home():
    return "LunchBot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ–± –æ–±–µ–¥–µ
async def ask_lunch(app: Application):
    logging.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –ª–∞–Ω—á–µ")
    now = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    data = load_data()
    data[now] = data.get(now, {})
    markup = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await app.bot.send_message(chat_id=CHAT_ID, text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=markup)
    save_data(data)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != CHAT_ID:
        return

    response = update.message.text.strip()
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    data = load_data()
    data[today] = {"response": response}
    save_data(data)
    await context.bot.send_message(chat_id=CHAT_ID, text="–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!")

# –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –Ω–µ–¥–µ–ª–∏
async def weekly_summary(app: Application):
    logging.info("üìä –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –Ω–µ–¥–µ–ª–∏")
    data = load_data()
    count = sum(1 for day in data.values() if day.get("response") == "–î–∞")
    messages = {
        0: "–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—â—É—â–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã (–Ω–µ—Ç)",
        1: "–ù—É –Ω–∏—á–µ–≥–æ, —Ç—ã —Å—Ç–∞—Ä–∞–ª—Å—è!",
        2: "–ù–µ–ø–ª–æ—Ö–æ!",
        3: "–ö—Ä–∞—Å–∞–≤—á–∏–∫, —Ü–µ–ª—ã—Ö —Ç—Ä–∏ –æ–±–µ–¥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!",
        4: "–í–∞—É! –¢—ã —Å—É–ø–µ—Ä!",
        5: "–í—Å—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª? –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!",
        6: "–¢—ã –ø—Ä–æ—Å—Ç–æ –ª—É—á—à–∏–π, –ø–æ—á—Ç–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª!",
        7: "–ê–º–±–∏–ª–∏–≤–±–ª! –í–∏–Ω —Å—Ç—Ä–∏–∫!",
    }
    summary = messages.get(count, f"–¢—ã –ø–æ–æ–±–µ–¥–∞–ª {count} —Ä–∞–∑(–∞) –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.")
    await app.bot.send_message(chat_id=CHAT_ID, text=f"üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:
{summary}")
    save_data({})  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö

# –ó–∞–ø—É—Å–∫
async def main():
    logging.info("üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LunchBot...")
    application = Application.builder().token(TOKEN).build()

    application.add_handler(MessageHandler(filters.TEXT, handle_response))

    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: application.create_task(ask_lunch(application)), "cron", hour=12, minute=0)
    scheduler.add_job(lambda: application.create_task(weekly_summary(application)), "cron", day_of_week="sun", hour=19, minute=0)
    scheduler.start()

    Thread(target=run_flask).start()
    logging.info("‚úÖ LunchBot –≥–æ—Ç–æ–≤. –°—Ç–∞—Ä—Ç polling...")
    await application.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
