import json
import os
import asyncio
import nest_asyncio
from datetime import datetime
from flask import Flask
from threading import Thread
from pytz import timezone
from apscheduler.schedulers.background import BackgroundScheduler

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DATA_FILE = "lunch_data.json"
TIMEZONE = timezone("Asia/Nicosia")
USER_ID = 344657888  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Flask –¥–ª—è UptimeRobot
app = Flask("")

@app.route("/")
def home():
    return "LunchBot is alive!", 200

def run_flask():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    Thread(target=run_flask).start()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_response(update: Update, context: CallbackContext):
    user_response = update.message.text
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    data = load_data()
    data[today] = user_response
    save_data(data)
    await update.message.reply_text("–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω. –°–ø–∞—Å–∏–±–æ!")

# –í–æ–ø—Ä–æ—Å –æ–± –æ–±–µ–¥–µ
async def ask_lunch(app):
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await app.bot.send_message(chat_id=USER_ID, text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def send_weekly_stats(app):
    data = load_data()
    today = datetime.now(TIMEZONE)
    count_yes = 0

    for i in range(7):
        day = (today - timedelta(days=i)).strftime("%Y-%m-%d")
        if data.get(day) == "–î–∞":
            count_yes += 1

    if count_yes == 0:
        text = "–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—â—É—â–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã (–Ω–µ—Ç)"
    elif count_yes == 1:
        text = "–ù—É –Ω–∏—á–µ–≥–æ, —Ç—ã —Å—Ç–∞—Ä–∞–ª—Å—è!"
    elif count_yes == 2:
        text = "–ù–µ–ø–ª–æ—Ö–æ!"
    elif count_yes == 3:
        text = "–ö—Ä–∞—Å–∞–≤—á–∏–∫, —Ü–µ–ª—ã—Ö —Ç—Ä–∏ –æ–±–µ–¥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
    elif count_yes == 4:
        text = "–í–∞—É! –¢—ã —Å—É–ø–µ—Ä!"
    elif count_yes == 5:
        text = "–í—Å—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª? –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!"
    elif count_yes == 6:
        text = "–¢—ã –ø—Ä–æ—Å—Ç–æ –ª—É—á—à–∏–π, –ø–æ—á—Ç–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª!"
    else:
        text = "–ê–º–±–∏–ª–∏–≤–±–ª! –í–∏–Ω —Å—Ç—Ä–∏–∫!"

    await app.bot.send_message(chat_id=USER_ID, text=f"üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {count_yes}/7\n{text}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(MessageHandler(filters.TEXT & filters.USER(user_id=USER_ID), handle_response))

    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: application.create_task(ask_lunch(application)), "cron", hour=14, minute=0)
    scheduler.add_job(lambda: application.create_task(send_weekly_stats(application)), "cron", day_of_week="sun", hour=19, minute=0)
    scheduler.start()

    keep_alive()
    await application.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
