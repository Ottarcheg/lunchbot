
import asyncio
import json
import logging
from datetime import datetime
from pytz import timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask
import nest_asyncio

nest_asyncio.apply()

TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
CHAT_ID = "770144130"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ–π chat_id
DATA_FILE = "lunch_data.json"

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
app = Flask(__name__)
scheduler = BackgroundScheduler(timezone="Europe/Nicosia")

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

async def ask_lunch(app: Application):
    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –ª–∞–Ω—á–µ...")
    keyboard = [[
        InlineKeyboardButton("–î–∞", callback_data="yes"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="no"),
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await app.bot.send_message(chat_id=CHAT_ID, text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=reply_markup)

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.callback_query.data
    user_id = str(update.callback_query.from_user.id)
    data = load_data()
    today = str(datetime.now(timezone("Europe/Nicosia")).date())
    data[today] = user_response
    save_data(data)
    await update.callback_query.answer("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

async def send_summary(app: Application):
    logging.info("–§–æ—Ä–º–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    data = load_data()
    yes_count = list(data.values()).count("yes")
    if yes_count == 0:
        summary = "–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—â—É—â–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã (–Ω–µ—Ç)"
    elif yes_count == 1:
        summary = "–ù—É –Ω–∏—á–µ–≥–æ, —Ç—ã —Å—Ç–∞—Ä–∞–ª—Å—è!"
    elif yes_count == 2:
        summary = "–ù–µ–ø–ª–æ—Ö–æ!"
    elif yes_count == 3:
        summary = "–ö—Ä–∞—Å–∞–≤—á–∏–∫, —Ü–µ–ª—ã—Ö —Ç—Ä–∏ –æ–±–µ–¥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
    elif yes_count == 4:
        summary = "–í–∞—É! –¢—ã —Å—É–ø–µ—Ä!"
    elif yes_count == 5:
        summary = "–í—Å—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª? –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!"
    elif yes_count == 6:
        summary = "–¢—ã –ø—Ä–æ—Å—Ç–æ –ª—É—á—à–∏–π, –ø–æ—á—Ç–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª!"
    else:
        summary = "–ê–º–±–∏–ª–∏–≤–±–ª! –í–∏–Ω —Å—Ç—Ä–∏–∫!"
    await app.bot.send_message(
        chat_id=CHAT_ID,
        text=(
            f"üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:
"
            f"‚Äî –î–∞: {yes_count} —Ä–∞–∑(–∞)
"
            f"{summary}"
        )
    )

async def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CallbackQueryHandler(handle_response))

    scheduler.add_job(lambda: asyncio.create_task(ask_lunch(application)), "cron", hour=12, minute=6)
    scheduler.add_job(lambda: asyncio.create_task(send_summary(application)), "cron", day_of_week="sun", hour=19)
    scheduler.start()

    logging.info("‚úÖ LunchBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
