import asyncio
import json
import logging
from datetime import datetime
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler
from telegram.ext import (
    ApplicationBuilder, MessageHandler, filters, ContextTypes
)
from pytz import timezone

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
CHAT_ID = 344657888
DATA_FILE = "lunch_data.json"
CYPRUS_TZ = timezone("Europe/Nicosia")

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
app = Flask(__name__)
scheduler = BackgroundScheduler(timezone=CYPRUS_TZ)

def load_data():
    try:
        logging.info("üìÇ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞...")
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        logging.warning("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        return {}

def save_data(data):
    logging.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª...")
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

async def ask_lunch(application):
    now = datetime.now(CYPRUS_TZ).strftime('%H:%M:%S')
    logging.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –°–µ–π—á–∞—Å {now}")
    try:
        await application.bot.send_message(
            chat_id=CHAT_ID,
            text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?",
            reply_markup={
                "keyboard": [["–î–∞"], ["–ù–µ—Ç"]],
                "resize_keyboard": True,
                "one_time_keyboard": True,
            }
        )
        logging.info("üì® –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")

async def handle_response(update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç
    if not update.message or not update.message.text:
        logging.warning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    user_response = update.message.text.strip()
    logging.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {user_response}")

    data = load_data()
    today = datetime.now(CYPRUS_TZ).strftime('%Y-%m-%d')

    if today not in data:
        logging.info("üìÖ –°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        data[today] = {
            "–û—Ç–≤–µ—Ç—ã": [],
            "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞": {
                "–ó–ª–∞–∫–∏": 0,
                "–ë–µ–ª–æ–∫": 0,
                "–û–≤–æ—â–∏": 0,
                "–§—Ä—É–∫—Ç—ã": 0,
                "–ñ–∏—Ä—ã": 0,
                "–ú–æ–ª–æ–∫–æ": 0,
                "–°–ª–∞–¥–∫–æ–µ": 0
            }
        }

    # ‚è∞ –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–æ "–∑–∞–≤—Ç—Ä–∞–∫"
    if "–∑–∞–≤—Ç—Ä–∞–∫" in user_response.lower():
        logging.info("üç≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–æ–≤–æ '–∑–∞–≤—Ç—Ä–∞–∫' –≤ handle_response.")

        async def remind(delay_minutes, note):
            await asyncio.sleep(delay_minutes * 60)
            try:
                await context.bot.send_message(chat_id=CHAT_ID, text=f"‚è∞ –ü—Ä–æ—à–ª–æ —É–∂–µ {note} –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞. –°–∫–æ—Ä–æ –æ–±–µ–¥!")
                logging.info(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{note}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è '{note}': {e}")

        asyncio.create_task(remind(270, "4—á30–º"))
        asyncio.create_task(remind(290, "4—á50–º"))
        asyncio.create_task(remind(300, "5—á"))
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–∞"/"–ù–µ—Ç"
    if user_response.lower() in ["–¥–∞", "–Ω–µ—Ç"]:
        data[today]["–û—Ç–≤–µ—Ç—ã"].append(user_response.lower())
        save_data(data)
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç '{user_response}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if " - " in user_response:
        try:
            category, value = map(str.strip, user_response.split(" - "))
            value = float(value)
            logging.info(f"üìä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: –∫–∞—Ç–µ–≥–æ—Ä–∏—è = {category}, –∑–Ω–∞—á–µ–Ω–∏–µ = {value}")
            if category in data[today]["–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"]:
                data[today]["–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"][category] += value
                save_data(data)
                logging.info(f"üìä {category} —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ {value}.")

                message_id = data[today].get("table_message_id")
                if message_id:
                    actuals = data[today]["–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"]
                    table_text = (
                        "üçΩ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                        "```\n"
                        "| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–ª–∞–Ω | –§–∞–∫—Ç |\n"
                        "|-----------|------|------|\n"
                        f"| –ó–ª–∞–∫–∏     | 7    | {actuals['–ó–ª–∞–∫–∏']} |\n"
                        f"| –ë–µ–ª–æ–∫     | 6    | {actuals['–ë–µ–ª–æ–∫']} |\n"
                        f"| –û–≤–æ—â–∏     | 3    | {actuals['–û–≤–æ—â–∏']} |\n"
                        f"| –§—Ä—É–∫—Ç—ã    | 4    | {actuals['–§—Ä—É–∫—Ç—ã']} |\n"
                        f"| –ñ–∏—Ä—ã      | 4    | {actuals['–ñ–∏—Ä—ã']} |\n"
                        f"| –ú–æ–ª–æ–∫–æ    | 1    | {actuals['–ú–æ–ª–æ–∫–æ']} |\n"
                        f"| –°–ª–∞–¥–∫–æ–µ   | 200  | {actuals['–°–ª–∞–¥–∫–æ–µ']} |\n"
                        "```"
                    )
                    try:
                        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π table_message_id: {message_id}")
                        logging.info(f"üõ† –ü—ã—Ç–∞—é—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ -1002331382512")
                        logging.info(f"üìå –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n{table_text}")
                        await context.bot.edit_message_text(
                            chat_id=-1002331382512,
                            message_id=message_id,
                            text=table_text,
                            parse_mode="Markdown"
                        )
                        logging.info("üîÑ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ.")
                    except Exception as e:
                        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ —á–∞—Ç–µ: {e}")
                return
            else:
                logging.warning(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    logging.info("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def send_weekly_summary(application):
    logging.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    data = load_data()
    count = sum(day.count("–¥–∞") for day in data.values())
    messages = {
        0: "0/7. –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã —Å–æ–≤—Å–µ–º –∑–∞–±—ã–≤–∞–ª –æ–±–µ–¥–∞—Ç—å. –ù–∞–¥–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! üçΩÔ∏è",
        1: "1/7. –¢—ã –ø–æ–æ–±–µ–¥–∞–ª –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –Ω–µ–¥–µ–ª—é. –¢–∞–∫ –Ω–µ–ª—å–∑—è! üò•",
        2: "2/7. –î–≤–∞ –æ–±–µ–¥–∞ ‚Äî —ç—Ç–æ —É–∂–µ —á—Ç–æ-—Ç–æ, –Ω–æ –≤—Å—ë –µ—â—ë –º–∞–ª–æ. ü•Ñ",
        3: "3/7. –°–µ—Ä–µ–¥–∏–Ω–∫–∞ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–∫—É. –ù–∞–¥–æ –ª—É—á—à–µ! üç¥",
        4: "4/7. –ß–µ—Ç—ã—Ä–µ —Ä–∞–∑–∞ ‚Äî –ø–æ—á—Ç–∏ –æ—Ç–ª–∏—á–Ω–æ! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ! üçõ",
        5: "5/7. –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –æ–±–µ–¥–æ–º! üëè",
        6: "6/7. –¢—ã –±—ã–ª –Ω–∞ –≤—ã—Å–æ—Ç–µ! –®–µ—Å—Ç—å –æ–±–µ–¥–æ–≤ –∏–∑ —Å–µ–º–∏! üî•",
        7: "7/7! –ò–¥–µ–∞–ª—å–Ω–æ! –í—Å–µ —Å–µ–º—å –æ–±–µ–¥–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ! üèÜ",
    }
    message = (
        "üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n" +
        messages.get(count, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    )
    try:
        await application.bot.send_message(chat_id=CHAT_ID, text=message)
        logging.info("üì§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@app.route("/")
def home():
    logging.info("üåç –ü–æ–ª—É—á–µ–Ω HTTP GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return "LunchBot is running"

from telegram import Update
from telegram.ext import ContextTypes
from datetime import timedelta

async def handle_channel_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ.")

    if not update.message or not update.message.text:
        logging.warning("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    message_text = update.message.text.lower()

    async def remind(delay_minutes, note, meal):
        await asyncio.sleep(delay_minutes * 60)
        try:
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=f"‚è∞ –ü—Ä–æ—à–ª–æ —É–∂–µ {note} –ø–æ—Å–ª–µ {meal}. –ù–µ –∑–∞–±—É–¥—å –ø–æ–ø–∏—Ç–∞—Ç—å—Å—è!"
            )
            logging.info(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{note}' –ø–æ—Å–ª–µ {meal} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è '{note}' –ø–æ—Å–ª–µ {meal}: {e}")

    if "–∑–∞–≤—Ç—Ä–∞–∫" in message_text:
        logging.info("üç≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å '–∑–∞–≤—Ç—Ä–∞–∫'. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ –æ–±–µ–¥.")
        asyncio.create_task(remind(270, "4—á30–º", "–∑–∞–≤—Ç—Ä–∞–∫–∞"))  # 4 —á 30 –º–∏–Ω
        asyncio.create_task(remind(290, "4—á50–º", "–∑–∞–≤—Ç—Ä–∞–∫–∞"))  # 4 —á 50 –º–∏–Ω
        asyncio.create_task(remind(300, "5—á", "–∑–∞–≤—Ç—Ä–∞–∫–∞"))     # 5 —á

    elif "–æ–±–µ–¥" in message_text:
        logging.info("üç≤ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å '–æ–±–µ–¥'. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ —É–∂–∏–Ω.")
        asyncio.create_task(remind(270, "4—á30–º", "–æ–±–µ–¥–∞"))
        asyncio.create_task(remind(290, "4—á50–º", "–æ–±–µ–¥–∞"))
        asyncio.create_task(remind(300, "5—á", "–æ–±–µ–¥–∞"))

async def main():
    logging.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application...")
    logging.info(f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC): {datetime.now(timezone('UTC'))}")
    logging.info(f"üïí –í—Ä–µ–º—è –ö–∏–ø—Ä–∞: {datetime.now(CYPRUS_TZ)}")

    application = ApplicationBuilder().token(TOKEN).build()
    await application.bot.delete_webhook(drop_pending_updates=True)
    from telegram.ext import filters

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ –õ–ò–ß–ö–£ (–î–∞ / –ù–µ—Ç)
    application.add_handler(
        MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_response)
    )

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ö–ê–¢–ï–ì–û–†–ò–ô –∏–∑ –ì–†–£–ü–ü–´
    application.add_handler(
        MessageHandler(filters.TEXT & filters.Chat(chat_id=-1002331382512), handle_response)
    )

    # === –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞ ===
    application.add_handler(
        MessageHandler(filters.TEXT & (filters.ChatType.CHANNEL | filters.ChatType.GROUP | filters.ChatType.SUPERGROUP), handle_channel_message)
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
    loop = asyncio.get_running_loop()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
    logging.info("üìÖ –ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–¥–∞—á–∏...")
    scheduler.add_job(lambda: loop.create_task(ask_lunch(application)), "cron", hour=19, minute=0)
    scheduler.add_job(lambda: loop.create_task(send_weekly_summary(application)), "cron", day_of_week="sun", hour=22, minute=0)
    scheduler.add_job(lambda: loop.create_task(send_daily_table(application)), "cron", hour=7, minute=0)
    scheduler.add_job(lambda: loop.create_task(send_nutrition_summary(application)), "cron", hour=0, minute=0)
    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    logging.info("üì° LunchBot –≥–æ—Ç–æ–≤. –°—Ç–∞—Ä—Ç polling...")
    
    data = load_data()
    logging.info(f"üìÑ lunch_data.json: {json.dumps(data, indent=2, ensure_ascii=False)}")

    await application.run_polling()
    
from datetime import datetime

async def send_daily_table(application):
    logging.info("üìã –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–∏—Ç–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É...")
    today = datetime.now(CYPRUS_TZ).strftime('%Y-%m-%d')
    data = load_data()

    table = (
        "üçΩ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        "```\n"
        "| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–ª–∞–Ω | –§–∞–∫—Ç |\n"
        "|-----------|------|------|\n"
        "| –ó–ª–∞–∫–∏     | 7    |      |\n"
        "| –ë–µ–ª–æ–∫     | 6    |      |\n"
        "| –û–≤–æ—â–∏     | 3    |      |\n"
        "| –§—Ä—É–∫—Ç—ã    | 4    |      |\n"
        "| –ñ–∏—Ä—ã      | 4    |      |\n"
        "| –ú–æ–ª–æ–∫–æ    | 1    |      |\n"
        "| –°–ª–∞–¥–∫–æ–µ   | 200  |      |\n"
        "```"
    )

    try:
        msg = await application.bot.send_message(
            chat_id=-1002331382512,
            text=table,
            parse_mode="Markdown"
        )
        logging.info("üì§ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        if today not in data:
            data[today] = {
                "–û—Ç–≤–µ—Ç—ã": [],
                "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞": {
                    "–ó–ª–∞–∫–∏": 0,
                    "–ë–µ–ª–æ–∫": 0,
                    "–û–≤–æ—â–∏": 0,
                    "–§—Ä—É–∫—Ç—ã": 0,
                    "–ñ–∏—Ä—ã": 0,
                    "–ú–æ–ª–æ–∫–æ": 0,
                    "–°–ª–∞–¥–∫–æ–µ": 0
                }
            }
        data[today]["table_message_id"] = msg.message_id
        save_data(data)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã.")
        
async def send_nutrition_summary(application):
    logging.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è...")
    data = load_data()
    today = (datetime.now(CYPRUS_TZ) - timedelta(days=1)).strftime('%Y-%m-%d')
    logging.info(f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {today}")

    norms = {
        "–ó–ª–∞–∫–∏": 7,
        "–ë–µ–ª–æ–∫": 6,
        "–û–≤–æ—â–∏": 3,
        "–§—Ä—É–∫—Ç—ã": 4,
        "–ñ–∏—Ä—ã": 4,
        "–ú–æ–ª–æ–∫–æ": 1,
        "–°–ª–∞–¥–∫–æ–µ": 200
    }

    if today not in data or "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞" not in data[today]:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        return

    actuals = data[today]["–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"]
    logging.info(f"üìä –ü–ª–∞–Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {norms}")
    logging.info(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {actuals}")

    summary_lines = [
        "| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–ª–∞–Ω | –§–∞–∫—Ç | Œî    |",
        "|-----------|------|------|------|"
    ]

    for cat, plan in norms.items():
        fact = actuals.get(cat, 0)
        diff = round(fact - plan, 1)
        symbol = "‚úÖ" if diff == 0 else ("‚¨ÜÔ∏è" if diff > 0 else "‚¨áÔ∏è")
        summary_lines.append(
            f"| {cat:<9} | {plan:<4} | {fact:<4} | {symbol} {abs(diff):<3} |"
        )

    message = "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞ –∑–∞ –¥–µ–Ω—å:\n\n```\n" + "\n".join(summary_lines) + "\n```"

    try:
        await application.bot.send_message(
            chat_id=-1002331382512,
            text=message,
            parse_mode="Markdown"
        )
        logging.info("üì§ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    logging.info("üîÅ –ó–∞–ø—É—Å–∫ LunchBot —á–µ—Ä–µ–∑ asyncio.run...")
    asyncio.run(main())
