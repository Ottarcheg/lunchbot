import asyncio
import json
import logging
from datetime import datetime
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.base import JobLookupError
from telegram.ext import (
    ApplicationBuilder, MessageHandler, filters, ContextTypes
)
from pytz import timezone

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
CHAT_ID = 344657888
DATA_FILE = "lunch_data.json"
CYPRUS_TZ = timezone("Europe/Nicosia")

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
app = Flask(__name__)
scheduler = BackgroundScheduler(timezone=CYPRUS_TZ)

def load_data():
    try:
        logging.info("üìÇ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞...")
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        logging.warning("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        return {}

def save_data(data):
    logging.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª...")
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

async def ask_lunch(application):
    now = datetime.now(CYPRUS_TZ).strftime('%H:%M:%S')
    logging.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –°–µ–π—á–∞—Å {now}")
    try:
        await application.bot.send_message(
            chat_id=CHAT_ID,
            text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?",
            reply_markup={
                "keyboard": [["–î–∞"], ["–ù–µ—Ç"]],
                "resize_keyboard": True,
                "one_time_keyboard": True,
            }
        )
        logging.info("üì® –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")

async def handle_response(update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_response = update.message.text.lower()
    data = load_data()
    today = datetime.now(CYPRUS_TZ).strftime('%Y-%m-%d')

    if today not in data:
        data[today] = []

    if user_response in ["–¥–∞", "–Ω–µ—Ç"]:
        data[today].append(user_response)
        save_data(data)
        await update.message.reply_text("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç '{user_response}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        logging.info("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def send_weekly_summary(application):
    logging.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    data = load_data()
    count = sum(day.count("–¥–∞") for day in data.values())
    messages = {
        0: "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã —Å–æ–≤—Å–µ–º –∑–∞–±—ã–≤–∞–ª –æ–±–µ–¥–∞—Ç—å. –ù–∞–¥–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! üçΩÔ∏è",
        1: "–¢—ã –ø–æ–æ–±–µ–¥–∞–ª –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –Ω–µ–¥–µ–ª—é. –¢–∞–∫ –Ω–µ–ª—å–∑—è! üò•",
        2: "–î–≤–∞ –æ–±–µ–¥–∞ ‚Äî —ç—Ç–æ —É–∂–µ —á—Ç–æ-—Ç–æ, –Ω–æ –≤—Å—ë –µ—â—ë –º–∞–ª–æ. ü•Ñ",
        3: "–°–µ—Ä–µ–¥–∏–Ω–∫–∞ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–∫—É. –ù–∞–¥–æ –ª—É—á—à–µ! üç¥",
        4: "–ß–µ—Ç—ã—Ä–µ —Ä–∞–∑–∞ ‚Äî –ø–æ—á—Ç–∏ –æ—Ç–ª–∏—á–Ω–æ! –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ! üçõ",
        5: "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –æ–±–µ–¥–æ–º! üëè",
        6: "–¢—ã –±—ã–ª –Ω–∞ –≤—ã—Å–æ—Ç–µ! –®–µ—Å—Ç—å –æ–±–µ–¥–æ–≤ –∏–∑ —Å–µ–º–∏! üî•",
        7: "–ò–¥–µ–∞–ª—å–Ω–æ! –í—Å–µ —Å–µ–º—å –æ–±–µ–¥–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ! üèÜ",
    }
    message = (
        "üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n" +
        messages.get(count, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    )
    try:
        await application.bot.send_message(chat_id=CHAT_ID, text=message)
        logging.info("üì§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@app.route("/")
def home():
    logging.info("üåç –ü–æ–ª—É—á–µ–Ω HTTP GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return "LunchBot is running"

async def main():
    logging.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application...")
    logging.info(f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC): {datetime.utcnow()}")
    logging.info(f"üïí –í—Ä–µ–º—è –ö–∏–ø—Ä–∞: {datetime.now(CYPRUS_TZ)}")

    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT, handle_response))

    logging.info("üìÖ –ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–¥–∞—á–∏...")
    scheduler.add_job(lambda: asyncio.create_task(ask_lunch(application)), "cron", hour=15, minute=50)
    scheduler.add_job(lambda: asyncio.create_task(send_weekly_summary(application)), "cron", day_of_week="sun", hour=19, minute=0)
    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    logging.info("üì° LunchBot –≥–æ—Ç–æ–≤. –°—Ç–∞—Ä—Ç polling...")
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    logging.info("üîÅ –ó–∞–ø—É—Å–∫ LunchBot —á–µ—Ä–µ–∑ asyncio.run...")
    asyncio.run(main())
