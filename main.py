import json
import asyncio
import logging
from datetime import datetime, timedelta
from flask import Flask
from threading import Thread
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from telegram.ext.filters import User
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import httpx

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

TOKEN = "7701441306:AAF5Dd4VcXSilKIw9mAfPMmWQrzvAiWB69I"
USER_ID = 344657888
DATA_FILE = "lunch_data.json"
TIMEZONE = pytz.timezone("Asia/Nicosia")
APP_URL = "https://lunchbot-production.up.railway.app"

app = Flask(__name__)

@app.route("/")
def home():
    logging.info("üì° –ü–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω –Ω–∞ /")
    return "LunchBot is alive", 200

def run_flask():
    logging.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    Thread(target=run_flask).start()

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {update.message.text}")
    text = update.message.text
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    data = load_data()
    data[today] = text
    save_data(data)
    await update.message.reply_text("–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω. –°–ø–∞—Å–∏–±–æ!")

async def ask_lunch(app):
    logging.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ–± –æ–±–µ–¥–µ...")
    keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await app.bot.send_message(chat_id=USER_ID, text="–¢—ã –ø–æ–æ–±–µ–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)

async def send_weekly_stats(app):
    logging.info("üìä –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    data = load_data()
    today = datetime.now(TIMEZONE)
    count_yes = sum(
        1 for i in range(7)
        if data.get((today - timedelta(days=i)).strftime("%Y-%m-%d")) == "–î–∞"
    )
    messages = {
        0: "–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—â—É—â–∞—Ç—å —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã (–Ω–µ—Ç)",
        1: "–ù—É –Ω–∏—á–µ–≥–æ, —Ç—ã —Å—Ç–∞—Ä–∞–ª—Å—è!",
        2: "–ù–µ–ø–ª–æ—Ö–æ!",
        3: "–ö—Ä–∞—Å–∞–≤—á–∏–∫, —Ü–µ–ª—ã—Ö —Ç—Ä–∏ –æ–±–µ–¥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!",
        4: "–í–∞—É! –¢—ã —Å—É–ø–µ—Ä!",
        5: "–í—Å—é —Ä–∞–±–æ—á—É—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª? –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!",
        6: "–¢—ã –ø—Ä–æ—Å—Ç–æ –ª—É—á—à–∏–π, –ø–æ—á—Ç–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é –æ–±–µ–¥–∞–ª!",
        7: "–ê–º–±–∏–ª–∏–≤–±–ª! –í–∏–Ω —Å—Ç—Ä–∏–∫!"
    }
    summary = messages.get(count_yes, "–ù–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–∞, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
    await app.bot.send_message(chat_id=USER_ID, text=f"üìä –û–±–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {count_yes}/7\n{summary}")

async def ping_self():
    try:
        async with httpx.AsyncClient() as client:
            r = await client.get(APP_URL)
            logging.info(f"üîÑ Self-ping OK: {r.status_code}")
    except Exception as e:
        logging.warning(f"‚ùå Self-ping failed: {e}")

async def main():
    logging.info("üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LunchBot...")
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & User(user_id=USER_ID), handle_response))

    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: application.create_task(ask_lunch(application)), "cron", hour=14, minute=0)
    scheduler.add_job(lambda: application.create_task(send_weekly_stats(application)), "cron", day_of_week="sun", hour=19, minute=0)
    scheduler.add_job(lambda: application.create_task(ping_self()), "interval", minutes=4)
    scheduler.start()

    keep_alive()
    await asyncio.sleep(2)
    logging.info("‚úÖ LunchBot –≥–æ—Ç–æ–≤. –°—Ç–∞—Ä—Ç polling...")
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
